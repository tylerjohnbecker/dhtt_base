// generated from rosidl_adapter/resource/srv.idl.em
// with input from dhtt_msgs/srv/ModifyRequest.srv
// generated code does not contain a copyright notice

#include "dhtt_msgs/msg/Node.idl"

module dhtt_msgs {
  module srv {
    module ModifyRequest_Request_Constants {
      const int8 ADD = 0;
      const int8 ADD_FROM_FILE = 1;
      const int8 REMOVE = 2;
      const int8 PARAM_UPDATE = 3;
      const int8 MUTATE = 4;
    };
    @verbatim (language="comment", text=
      " choice of which modification to perform")
    struct ModifyRequest_Request {
      int8 type;

      @verbatim (language="comment", text=
        " list of nodes to be modified (added to, removed, or updated)")
      sequence<string> to_modify;

      @verbatim (language="comment", text=
        " optional: description of node to add to the tree")
      dhtt_msgs::msg::Node add_node;

      @verbatim (language="comment", text=
        " optional: file path and name of the subtree to add to the current tree")
      string to_add;

      @verbatim (language="comment", text=
        " optional: string description of the parameters to change (strings are of the form \"param: val\")")
      sequence<string> params;

      @verbatim (language="comment", text=
        " optional: type of node to mutate into (given by the types in the Node.msg file, or as a literal name in the case of behaviors)")
      string mutate_type;
    };
    @verbatim (language="comment", text=
      " returns whether or not a node was found, and whether it could be modified successfully")
    struct ModifyRequest_Response {
      boolean success;

      string error_msg;

      @verbatim (language="comment", text=
        " optional: for adding nodes their names will be changed as they are added to ensure they are unique. Therefore they will also be sent back here.")
      sequence<string> added_nodes;

      @verbatim (language="comment", text=
        " optional: in case a node fails to be removed all successfully removed nodes will have their names given here")
      sequence<string> removed_nodes;
    };
  };
};
