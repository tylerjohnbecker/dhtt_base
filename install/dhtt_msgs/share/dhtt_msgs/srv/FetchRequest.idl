// generated from rosidl_adapter/resource/srv.idl.em
// with input from dhtt_msgs/srv/FetchRequest.srv
// generated code does not contain a copyright notice

#include "dhtt_msgs/msg/Subtree.idl"

module dhtt_msgs {
  module srv {
    module FetchRequest_Request_Constants {
      const int8 ROOT = 1;
      const int8 AND = 2;
      const int8 THEN = 3;
      const int8 OR = 4;
      const int8 BEHAVIOR = 5;
    };
    @verbatim (language="comment", text=
      " if this parameter is true then each time a candidate node is found it's entire subtree of children will be returned as well")
    struct FetchRequest_Request {
      boolean return_full_subtree;

      @verbatim (language="comment", text=
        " optional: find nodes which contain this common name")
      string common_name;

      @verbatim (language="comment", text=
        " optional: find node with this name")
      string node_name;

      @verbatim (language="comment", text=
        " optional: find nodes of this type")
      int8 node_type;
    };
    @verbatim (language="comment", text=
      " whether or not any matching nodes were found in the tree")
    struct FetchRequest_Response {
      boolean success;

      string error_msg;

      @verbatim (language="comment", text=
        " the list of matching subtrees (or nodes if return_full_subtrees was false)")
      sequence<dhtt_msgs::msg::Subtree> found_subtrees;
    };
  };
};
